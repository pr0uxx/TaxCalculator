// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaxCalculator.EfCore;

#nullable disable

namespace TaxCalculator.EfCore.Migrations
{
    [DbContext(typeof(TaxCalculatorContext))]
    partial class TaxCalculatorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TaxCalculator.Models.Data.TaxBand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("IsoCountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("PercentRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RangeLowerBound")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RangeUpperBound")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TaxYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsoCountryCode", "TaxYear");

                    b.ToTable("TaxBands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsoCountryCode = "GBR",
                            PercentRate = 0m,
                            RangeLowerBound = 0m,
                            RangeUpperBound = 5000m,
                            TaxYear = 2022
                        },
                        new
                        {
                            Id = 2,
                            IsoCountryCode = "GBR",
                            PercentRate = 20m,
                            RangeLowerBound = 5000m,
                            RangeUpperBound = 20000m,
                            TaxYear = 2022
                        },
                        new
                        {
                            Id = 3,
                            IsoCountryCode = "GBR",
                            PercentRate = 40m,
                            RangeLowerBound = 20000m,
                            RangeUpperBound = 0m,
                            TaxYear = 2022
                        });
                });

            modelBuilder.Entity("TaxCalculator.Models.Data.TaxYear", b =>
                {
                    b.Property<string>("IsoCountryCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("IsoCountryCode", "Year");

                    b.ToTable("TaxYears");

                    b.HasData(
                        new
                        {
                            IsoCountryCode = "GBR",
                            Year = 2022
                        });
                });

            modelBuilder.Entity("TaxCalculator.Models.Data.TaxBand", b =>
                {
                    b.HasOne("TaxCalculator.Models.Data.TaxYear", null)
                        .WithMany("TaxBands")
                        .HasForeignKey("IsoCountryCode", "TaxYear")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaxCalculator.Models.Data.TaxYear", b =>
                {
                    b.Navigation("TaxBands");
                });
#pragma warning restore 612, 618
        }
    }
}
